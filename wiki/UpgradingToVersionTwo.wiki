#labels Featured
= Introduction =

This page contains instructions for upgrading from version 1.X of the plugin to version 2.X.


= Installation =
We recommend you make a fresh copy of the SDK, install the `DataNucleus` plugin there, and then develop against this copy of the SDK. Here is the sequence of commands you can use, assuming your sdk lives in `<sdk_root>`:

Make a copy of the SDK:
<br>
{{{
cp -r <sdk_root> <new_sdk_root>
}}}

Delete all components of the v1 plugin:
{{{
rm -rf <new_sdk_root>/lib/user/orm/*
rm -rf <new_sdk_root>/lib/tools/orm/*
rm -rf <new_sdk_root>/src/orm/*
}}}

Unzip the v2 zip archive into `<new_sdk_root>`:
{{{
cd <new_sdk_root>
unzip datanucleus-appengine-2.0.0-RC2-dist.zip
}}}

= Configuration =
We have removed the App Engine specific JDO and JPA providers in V2, so you'll need to edit your JDO/JPA config files as follows:

In jdoconfig.xml, the value of `javax.jdo.PersistenceManagerFactoryClass`
should now be `org.datanucleus.api.jdo.JDOPersistenceManagerFactory`. See http://code.google.com/p/datanucleus-appengine/source/browse/trunk/tests/META-INF/jdoconfig.xml for an example.

In persistence.xml, the value of `provider` should now be `org.datanucleus.api.jpa.PersistenceProviderImpl`. See http://code.google.com/p/datanucleus-appengine/source/browse/trunk/tests/META-INF/persistence.xml for an example.

== Configuration With Ant ==
The enhancement Ant task that ships with the SDK does not work with v2 of the `DataNucleus` plugin, so if you're using Ant you'll need to use the `DataNucleus` enhancement task directly in your `build.xml`:
{{{

<path id="enhancer.classpath">
    <fileset dir="${sdk.dir}/lib/opt/tools/datanucleus/v2">
        <include name="**/datanucleus-enhancer*.jar"/>
        <include name="**/asm-*.jar"/>
    </fileset>
</path>

<!-- This target should replace your existing datanucleusenhance target -->
<target name="datanucleusenhance" depends="compile" description="DataNucleus enhancement">
    <taskdef name="datanucleusenhancer" classpathref="enhancer.classpath" 
                classname="org.datanucleus.enhancer.tools.EnhancerTask" />

    <datanucleusenhancer failonerror="true">
        <fileset dir="war/WEB-INF/classes">
            <include name="**/*.class"/>
        </fileset>
        <classpath>
            <path refid="enhancer.classpath"/>
            <path refid="project.classpath"/>
        </classpath>
    </datanucleusenhancer>
</target>
}}}

You can find an example of a working ant config in `<new_sdk_root>/demos/helloorm/build.xml`

== Configuration With Eclipse ==
(The following instructions are for Indigo and assume you already have the [http://code.google.com/appengine/docs/java/tools/eclipse.html Google Eclipse Plugin] installed)
   * Disable the v1 `DataNucleus` enhancement by going to Project --> Properties --> Google --> App Engine --> ORM and then removing any patterns that are listed. Click "OK."
   * Configure your project to use the SDK containing the new version of the `DataNucleus` App Engine plugin by going to Project --> Properties --> Google --> App Engine. Add the SDK by clicking "Configure SDKs" and then select that SDK for your project (Use specific SDK).
   * Add the JDO or JPA API jar in `<new_sdk_root>`/lib/opt/user/datanucleus/v2 to the Build Path for your project: Right-click on your project, choose Build Path --> Configure Build Path, then click "Add External JARs." For JDO, add jdo-api-3.0.jar. For JPA add geronimo-jpa_2.0_spec-1.0.jar.
   * Copy the contents of `<new_sdk_root>`/lib/opt/user/datanucleus/v2 to your project's war/WEB-INF/lib directory.
   * Install and configure the `DataNucleus` Eclipse plugin. Instructions are available at http://www.datanucleus.org/products/accessplatform/guides/eclipse/index.html. 
  # Follow the instructions under "Plugin Installation" 
  # Follow the instructions under "Plugin Configuration" 
  # Follow the instructions under "Plugin Configuration - General" but note that the screenshot refers to an old version of `DataNucleus.` You will instead want to add all jars in `<new_sdk_root>`/lib/opt/tools/datanucleus/v2 and make sure the checkbox labeled "Use project classpath when running tools" is _not_ selected.
  # Follow the instructions under "Plugin configuration - Enhancer"
  # _Skip_ the instructions under "Plugin configuration - SchemaTool"
  # Follow the instructions under "Enabling DataNucleus support"
  # _Skip_ the instructions under "Defining JDO2 Metadata"
  # _Skip_ the instructions under "Defining 'persistence.xml'"
  # Follow the instructions under "Enhancing the classes"
  # _Skip_ the instructions under "Generating your database schema (RDBMS)"

Once you've completed these steps, you should see output from the Enhancer whenever you modify and save one of your model classes.

== Configuration With IntelliJ ==
TODO(maxr)

== ==
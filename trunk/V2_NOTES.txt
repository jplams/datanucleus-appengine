The major change with version 2 is to use DataNucleus v3.x. This brings with it some significant changes.
* JDO PersistenceManagerFactoryClass is now "org.datanucleus.api.jdo.JDOPersistenceManagerFactory"

* JPA "persistence provider" is now "org.datanucleus.api.jpa.PersistenceProviderImpl"

* Level2 Caching is enabled by default. 
  Set persistence property "datanucleus.cache.level2.type" to "none" to get the previous behaviour.
  Alternatively include the datanucleus-cache plugin in the classpath, and set persistence property
  "datanucleus.cache.level2.type" to "javax.cache" and it will use GAE Memcached for L2 caching.
   
* Datastore IdentifierFactory has changed to default to "datanucleus2". 
  Set persistence property "datanucleus.identifierFactory" to "datanucleus1" to get the previous behaviour.

* Non-transactional calls to pm.makePersistent, pm.deletePersistent, em.persist, em.merge, em.remove are now
  executed atomically, whereas before you waited til the next transaction or pm.close/em.close

* JPA has "retainValues" enabled so so have the values of loaded fields retained in objects after commit.

* "javax.persistence.query.chunkSize" is no longer used (invalid name anyway). Use "datanucleus.query.fetchSize" instead.

* There is now no longer an exception on duplicate PMF allocation. Instead if you have the persistence property
  "datanucleus.singletonPMFForName" set to "true" then it will return the currently allocated singleton PMF for that name.

* There is now no longer an exception on duplicate EMF allocation. Instead if you have the persistence property
  "datanucleus.singletonEMFForName" set to "true" then it will return the currently allocated singleton EMF for that name.

* JDOQL/JPQL setResultClass now works

* Primary Keys can now also be of type long.

